import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { RefreshCw, Clock, Award, HelpCircle } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho c√°c c√¢u ƒë·ªë
type Puzzle = {
  id: string;
  answer: string;
  category: "model" | "concept" | "tool";
  hints: string[];
  options: string[];
};

export default function BlindBoxGame() {
  // Danh s√°ch c√°c c√¢u ƒë·ªë
  const puzzles: Puzzle[] = [
    {
      id: "gpt4",
      answer: "GPT-4",
      category: "model",
      hints: [
        "T√¥i ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi OpenAI.",
        "T√¥i c√≥ th·ªÉ hi·ªÉu v√† t·∫°o vƒÉn b·∫£n ph·ª©c t·∫°p.",
        "T√¥i l√† phi√™n b·∫£n ti·∫øp theo c·ªßa GPT-3.",
      ],
      options: ["GPT-4", "BERT", "LLaMA", "Claude"],
    },
    {
      id: "diffusion",
      answer: "Stable Diffusion",
      category: "model",
      hints: [
        "T√¥i t·∫°o h√¨nh ·∫£nh t·ª´ m√¥ t·∫£ vƒÉn b·∫£n.",
        "T√¥i l√† m√£ ngu·ªìn m·ªü v√† c√≥ th·ªÉ ch·∫°y tr√™n m√°y t√≠nh c√° nh√¢n.",
        "T√™n c·ªßa t√¥i g·ª£i √Ω v·ªÅ s·ª± ·ªïn ƒë·ªãnh.",
      ],
      options: ["DALL-E", "Stable Diffusion", "Midjourney", "GAN"],
    },
    {
      id: "transformer",
      answer: "Transformer",
      category: "concept",
      hints: [
        "T√¥i l√† m·ªôt ki·∫øn tr√∫c m·∫°ng n∆°-ron.",
        "T√¥i s·ª≠ d·ª•ng c∆° ch·∫ø self-attention.",
        "T√¥i l√† n·ªÅn t·∫£ng c·ªßa h·∫ßu h·∫øt c√°c m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn hi·ªán ƒë·∫°i.",
      ],
      options: ["Transformer", "CNN", "RNN", "GAN"],
    },
    {
      id: "finetuning",
      answer: "Fine-tuning",
      category: "concept",
      hints: [
        "T√¥i l√† qu√° tr√¨nh ƒëi·ªÅu ch·ªânh m·ªôt m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán tr∆∞·ªõc.",
        "T√¥i gi√∫p m√¥ h√¨nh th√≠ch nghi v·ªõi nhi·ªám v·ª• c·ª• th·ªÉ.",
        "T√¥i th∆∞·ªùng s·ª≠ d·ª•ng √≠t d·ªØ li·ªáu h∆°n so v·ªõi hu·∫•n luy·ªán t·ª´ ƒë·∫ßu.",
      ],
      options: [
        "Fine-tuning",
        "Transfer Learning",
        "Prompt Engineering",
        "Reinforcement Learning",
      ],
    },
    {
      id: "embedding",
      answer: "Embedding",
      category: "concept",
      hints: [
        "T√¥i bi·∫øn ƒë·ªïi d·ªØ li·ªáu th√†nh vector s·ªë.",
        "T√¥i gi√∫p m√°y t√≠nh hi·ªÉu ng·ªØ nghƒ©a c·ªßa t·ª´ v√† c√¢u.",
        "T√¥i l√† n·ªÅn t·∫£ng cho vi·ªác t√¨m ki·∫øm ng·ªØ nghƒ©a.",
      ],
      options: ["Embedding", "Tokenization", "Classification", "Clustering"],
    },
    {
      id: "dalle",
      answer: "DALL-E",
      category: "model",
      hints: [
        "T√™n c·ªßa t√¥i l√† s·ª± k·∫øt h·ª£p c·ªßa m·ªôt robot ho·∫°t h√¨nh v√† m·ªôt ngh·ªá sƒ© n·ªïi ti·∫øng.",
        "T√¥i ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi OpenAI.",
        "T√¥i t·∫°o h√¨nh ·∫£nh t·ª´ m√¥ t·∫£ vƒÉn b·∫£n.",
      ],
      options: ["Midjourney", "DALL-E", "Stable Diffusion", "Imagen"],
    },
    {
      id: "rlhf",
      answer: "RLHF",
      category: "concept",
      hints: [
        "T√¥i l√† m·ªôt ph∆∞∆°ng ph√°p hu·∫•n luy·ªán m√¥ h√¨nh d·ª±a tr√™n ph·∫£n h·ªìi c·ªßa con ng∆∞·ªùi.",
        "T√¥i gi√∫p m√¥ h√¨nh t·∫°o ra n·ªôi dung an to√†n v√† h·ªØu √≠ch h∆°n.",
        "T√¥i l√† vi·∫øt t·∫Øt c·ªßa Reinforcement Learning from Human Feedback.",
      ],
      options: ["RLHF", "PEFT", "RAG", "LoRA"],
    },
    {
      id: "llm",
      answer: "LLM",
      category: "concept",
      hints: [
        "T√¥i l√† vi·∫øt t·∫Øt c·ªßa Large Language Model.",
        "GPT, LLaMA v√† Claude ƒë·ªÅu thu·ªôc lo·∫°i n√†y.",
        "T√¥i c√≥ th·ªÉ hi·ªÉu v√† t·∫°o vƒÉn b·∫£n gi·ªëng con ng∆∞·ªùi.",
      ],
      options: ["LLM", "CNN", "GAN", "VAE"],
    },
    {
      id: "rag",
      answer: "RAG",
      category: "concept",
      hints: [
        "T√¥i k·∫øt h·ª£p truy xu·∫•t th√¥ng tin v·ªõi m√¥ h√¨nh ng√¥n ng·ªØ.",
        "T√¥i gi√∫p m√¥ h√¨nh truy c·∫≠p ki·∫øn th·ª©c b√™n ngo√†i.",
        "T√¥i l√† vi·∫øt t·∫Øt c·ªßa Retrieval Augmented Generation.",
      ],
      options: ["RAG", "RLHF", "LoRA", "PEFT"],
    },
    {
      id: "midjourney",
      answer: "Midjourney",
      category: "model",
      hints: [
        "T√¥i l√† m·ªôt c√¥ng c·ª• t·∫°o h√¨nh ·∫£nh t·ª´ vƒÉn b·∫£n.",
        "T√¥i th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng th√¥ng qua Discord.",
        "T√¥i n·ªïi ti·∫øng v·ªõi kh·∫£ nƒÉng t·∫°o h√¨nh ·∫£nh ngh·ªá thu·∫≠t.",
      ],
      options: ["DALL-E", "Stable Diffusion", "Midjourney", "Imagen"],
    },
  ];

  // State cho tr√≤ ch∆°i
  const [currentPuzzleIndex, setCurrentPuzzleIndex] = useState(0);
  const [revealedHints, setRevealedHints] = useState(0);
  const [timeLeft, setTimeLeft] = useState(30);
  const [score, setScore] = useState(0);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);
  const [gameActive, setGameActive] = useState(true);
  const [showResult, setShowResult] = useState(false);
  const [shuffledOptions, setShuffledOptions] = useState<string[]>([]);

  // Refs
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const hintTimerRef = useRef<NodeJS.Timeout | null>(null);

  // L·∫•y c√¢u ƒë·ªë hi·ªán t·∫°i
  const currentPuzzle = puzzles[currentPuzzleIndex];

  // X√°o tr·ªôn c√°c l·ª±a ch·ªçn khi c√¢u ƒë·ªë thay ƒë·ªïi
  useEffect(() => {
    if (currentPuzzle) {
      const options = [...currentPuzzle.options];
      const shuffled = options.sort(() => Math.random() - 0.5);
      setShuffledOptions(shuffled);
    }
  }, [currentPuzzleIndex]); // Only depend on the puzzle index, not the puzzle itself

  // Thi·∫øt l·∫≠p b·ªô ƒë·∫øm th·ªùi gian v√† g·ª£i √Ω
  useEffect(() => {
    // Only set up timers when the game is active and we're not showing results
    if (!gameActive || showResult) {
      return;
    }

    // ƒê·∫∑t l·∫°i tr·∫°ng th√°i
    setTimeLeft(30);
    setRevealedHints(0);
    setSelectedOption(null);
    setIsCorrect(null);

    // B·ªô ƒë·∫øm th·ªùi gian ch√≠nh
    const mainTimer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          // H·∫øt th·ªùi gian
          clearInterval(mainTimer);
          setShowResult(true);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    // B·ªô ƒë·∫øm th·ªùi gian cho g·ª£i √Ω
    const hintTimer = setInterval(() => {
      setRevealedHints((prev) => {
        if (prev >= 2) {
          clearInterval(hintTimer);
          return prev;
        }
        return prev + 1;
      });
    }, 10000);

    // Cleanup function
    return () => {
      clearInterval(mainTimer);
      clearInterval(hintTimer);
    };
  }, [currentPuzzleIndex, gameActive, showResult]); // Only depend on these values

  // X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i ch·ªçn m·ªôt l·ª±a ch·ªçn
  const handleOptionSelect = (option: string) => {
    if (selectedOption || showResult) return;

    setSelectedOption(option);
    const correct = option === currentPuzzle.answer;
    setIsCorrect(correct);

    if (correct) {
      // T√≠nh ƒëi·ªÉm d·ª±a tr√™n s·ªë g·ª£i √Ω ƒë√£ hi·ªÉn th·ªã v√† th·ªùi gian c√≤n l·∫°i
      const hintBonus = 3 - revealedHints; // C√†ng √≠t g·ª£i √Ω c√†ng nhi·ªÅu ƒëi·ªÉm
      const timeBonus = Math.floor(timeLeft / 5); // Th·ªùi gian c√≤n l·∫°i c√†ng nhi·ªÅu c√†ng nhi·ªÅu ƒëi·ªÉm
      const pointsEarned = 10 + hintBonus * 5 + timeBonus;

      setScore((prev) => prev + pointsEarned);
    }

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    setShowResult(true);

    // D·ª´ng c√°c b·ªô ƒë·∫øm th·ªùi gian
    if (timerRef.current) clearInterval(timerRef.current);
    if (hintTimerRef.current) clearInterval(hintTimerRef.current);
  };

  // Chuy·ªÉn sang c√¢u ƒë·ªë ti·∫øp theo
  const nextPuzzle = () => {
    if (currentPuzzleIndex < puzzles.length - 1) {
      setCurrentPuzzleIndex((prev) => prev + 1);
      setShowResult(false);
      setGameActive(true);
    } else {
      // ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c c√¢u ƒë·ªë
      setGameActive(false);
    }
  };

  // B·∫Øt ƒë·∫ßu tr√≤ ch∆°i m·ªõi
  const restartGame = () => {
    setCurrentPuzzleIndex(0);
    setScore(0);
    setShowResult(false);
    setGameActive(true);
  };

  // L·∫•y m√†u cho danh m·ª•c
  const getCategoryColor = (category: string) => {
    switch (category) {
      case "model":
        return "bg-blue-500";
      case "concept":
        return "bg-purple-500";
      case "tool":
        return "bg-green-500";
      default:
        return "bg-gray-500";
    }
  };

  // L·∫•y bi·ªÉu t∆∞·ª£ng cho danh m·ª•c
  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "model":
        return "ü§ñ";
      case "concept":
        return "üí°";
      case "tool":
        return "üîß";
      default:
        return "‚ùì";
    }
  };

  return (
    <div className="flex flex-col items-center w-full max-w-4xl mx-auto p-4">
      <div className="w-full text-center mb-6">
        <h1 className="text-2xl font-bold mb-2">
          Blind Box: ƒêo√°n Kh√°i Ni·ªám AI
        </h1>
        <p className="text-gray-600">
          {gameActive
            ? "ƒêo√°n kh√°i ni·ªám AI d·ª±a tr√™n c√°c g·ª£i √Ω ƒë∆∞·ª£c hi·ªÉn th·ªã m·ªói 10 gi√¢y!"
            : "Tr√≤ ch∆°i k·∫øt th√∫c! H√£y ch∆°i l·∫°i ƒë·ªÉ c·∫£i thi·ªán ƒëi·ªÉm s·ªë c·ªßa b·∫°n."}
        </p>
      </div>

      <div className="flex justify-between items-center w-full mb-4">
        <div className="bg-slate-100 rounded-lg p-2 flex items-center">
          <Award className="w-5 h-5 mr-2 text-yellow-500" />
          <span className="font-bold">ƒêi·ªÉm: {score}</span>
        </div>

        <div className="flex items-center bg-slate-100 rounded-lg p-2">
          <Clock className="w-5 h-5 mr-2 text-blue-500" />
          <span className="font-bold">{timeLeft}s</span>
          <Progress value={(timeLeft / 30) * 100} className="w-20 h-2 ml-2" />
        </div>

        <Button variant="outline" onClick={restartGame}>
          <RefreshCw className="w-4 h-4 mr-2" />
          Ch∆°i l·∫°i
        </Button>
      </div>

      {gameActive && currentPuzzle && (
        <div className="w-full bg-white border border-gray-300 rounded-lg overflow-hidden shadow-md">
          {/* Ph·∫ßn ƒë·∫ßu */}
          <div className="bg-slate-100 p-4 flex items-center justify-between">
            <div className="flex items-center">
              <div
                className={`w-8 h-8 rounded-full flex items-center justify-center text-white ${getCategoryColor(
                  currentPuzzle.category
                )}`}
              >
                {getCategoryIcon(currentPuzzle.category)}
              </div>
              <span className="ml-2 font-semibold">
                C√¢u h·ªèi {currentPuzzleIndex + 1}/{puzzles.length}
              </span>
            </div>
            <div className="text-sm text-gray-600">
              {currentPuzzle.category === "model"
                ? "M√¥ h√¨nh AI"
                : currentPuzzle.category === "concept"
                ? "Kh√°i ni·ªám AI"
                : "C√¥ng c·ª• AI"}
            </div>
          </div>

          {/* H·ªôp b√≠ ·∫©n */}
          <div className="p-6 flex flex-col items-center">
            <div className="w-full max-w-md bg-slate-50 border-2 border-dashed border-slate-300 rounded-lg p-6 mb-6 relative">
              <div className="absolute top-2 right-2">
                <HelpCircle className="w-5 h-5 text-slate-400" />
              </div>

              <h2 className="text-xl font-bold text-center mb-4">Blind Box</h2>

              {/* C√°c g·ª£i √Ω */}
              <div className="space-y-3">
                {currentPuzzle.hints.map((hint, index) => (
                  <AnimatePresence key={`hint-${index}`}>
                    {index <= revealedHints && (
                      <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5 }}
                        className="bg-white p-3 rounded-lg shadow-sm"
                      >
                        <p className="text-gray-800">
                          <span className="font-bold text-blue-500">
                            G·ª£i √Ω {index + 1}:
                          </span>{" "}
                          {hint}
                        </p>
                      </motion.div>
                    )}
                  </AnimatePresence>
                ))}

                {revealedHints < 2 && (
                  <div className="text-center text-gray-500 mt-2">
                    G·ª£i √Ω ti·∫øp theo sau {timeLeft % 10 || 10} gi√¢y...
                  </div>
                )}
              </div>
            </div>

            {/* C√°c l·ª±a ch·ªçn */}
            <div className="w-full max-w-md grid grid-cols-2 gap-3">
              {shuffledOptions.map((option, index) => (
                <button
                  key={`option-${index}`}
                  className={`p-4 rounded-lg border-2 transition-all text-center
                    ${
                      selectedOption === option
                        ? option === currentPuzzle.answer
                          ? "border-green-500 bg-green-50 text-green-700"
                          : "border-red-500 bg-red-50 text-red-700"
                        : showResult && option === currentPuzzle.answer
                        ? "border-green-500 bg-green-50 text-green-700"
                        : "border-gray-300 hover:border-blue-500 bg-white"
                    }
                    ${
                      showResult && option !== currentPuzzle.answer
                        ? "opacity-50"
                        : "opacity-100"
                    }
                  `}
                  onClick={() => handleOptionSelect(option)}
                  disabled={showResult}
                >
                  {option}
                </button>
              ))}
            </div>
          </div>

          {/* K·∫øt qu·∫£ v√† n√∫t ti·∫øp theo */}
          {showResult && (
            <div
              className={`p-4 ${
                isCorrect ? "bg-green-100" : "bg-red-100"
              } flex justify-between items-center`}
            >
              <div>
                <p
                  className={`font-bold ${
                    isCorrect ? "text-green-700" : "text-red-700"
                  }`}
                >
                  {isCorrect
                    ? `Ch√≠nh x√°c! ${selectedOption} l√† ƒë√°p √°n ƒë√∫ng.`
                    : `Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√† ${currentPuzzle.answer}.`}
                </p>
              </div>
              <Button onClick={nextPuzzle}>
                {currentPuzzleIndex < puzzles.length - 1
                  ? "C√¢u ti·∫øp theo"
                  : "K·∫øt th√∫c"}
              </Button>
            </div>
          )}
        </div>
      )}

      {!gameActive && (
        <div className="w-full bg-white border border-gray-300 rounded-lg p-6 text-center">
          <h2 className="text-2xl font-bold mb-4">Tr√≤ ch∆°i k·∫øt th√∫c!</h2>
          <p className="text-xl mb-6">
            ƒêi·ªÉm s·ªë cu·ªëi c√πng c·ªßa b·∫°n:{" "}
            <span className="font-bold text-blue-600">{score}</span>
          </p>
          <Button onClick={restartGame} size="lg">
            <RefreshCw className="w-5 h-5 mr-2" />
            Ch∆°i l·∫°i
          </Button>
        </div>
      )}

      <div className="mt-6 text-sm text-gray-600 text-center">
        <p>
          M·ªói 10 gi√¢y, m·ªôt g·ª£i √Ω m·ªõi s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã. H√£y ƒëo√°n c√†ng nhanh c√†ng
          t·ªët ƒë·ªÉ nh·∫≠n nhi·ªÅu ƒëi·ªÉm h∆°n!
        </p>
        <p className="mt-1">
          ƒêi·ªÉm th∆∞·ªüng d·ª±a tr√™n s·ªë g·ª£i √Ω ƒë√£ s·ª≠ d·ª•ng v√† th·ªùi gian c√≤n l·∫°i.
        </p>
      </div>
    </div>
  );
}
