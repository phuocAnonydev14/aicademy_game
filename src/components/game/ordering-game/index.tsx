import { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { ArrowRight, RefreshCw, Trophy, Info } from 'lucide-react';

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho c√°c b∆∞·ªõc trong quy tr√¨nh
type WorkflowStep = {
  id: string;
  text: string;
  correctPosition: number;
};

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho c√¢u ƒë·ªë
type Puzzle = {
  id: string;
  title: string;
  result: string;
  resultImage: string;
  steps: WorkflowStep[];
  explanation: string;
};

export default function OrderingGame() {
  const [score, setScore] = useState(0);
  const [level, setLevel] = useState(1);
  const [currentPuzzle, setCurrentPuzzle] = useState<Puzzle | null>(null);
  const [availableSteps, setAvailableSteps] = useState<WorkflowStep[]>([]);
  const [placedSteps, setPlacedSteps] = useState<(WorkflowStep | null)[]>([]);
  const [draggedStep, setDraggedStep] = useState<WorkflowStep | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [message, setMessage] = useState('');
  const [showExplanation, setShowExplanation] = useState(false);

  // Refs cho c√°c v·ªã tr√≠ th·∫£
  const slotRefs = useRef<(HTMLDivElement | null)[]>([]);

  // Danh s√°ch c√°c c√¢u ƒë·ªë theo c·∫•p ƒë·ªô
  const puzzles: Record<number, Puzzle[]> = {
    1: [
      {
        id: 'text-gen',
        title: 'Quy tr√¨nh t·∫°o vƒÉn b·∫£n AI',
        result: 'B√†i vi·∫øt v·ªÅ l·ª£i √≠ch c·ªßa tr√≠ tu·ªá nh√¢n t·∫°o trong gi√°o d·ª•c',
        resultImage: 'üìù',
        steps: [
          { id: 'problem', text: 'X√°c ƒë·ªãnh v·∫•n ƒë·ªÅ', correctPosition: 1 },
          { id: 'prompt', text: 'Vi·∫øt prompt', correctPosition: 2 },
          { id: 'model', text: 'Ch·ªçn m√¥ h√¨nh', correctPosition: 3 },
          { id: 'params', text: 'Thi·∫øt l·∫≠p tham s·ªë', correctPosition: 4 },
          { id: 'review', text: 'ƒê√°nh gi√° k·∫øt qu·∫£', correctPosition: 5 },
          { id: 'image', text: 'X·ª≠ l√Ω h√¨nh ·∫£nh', correctPosition: -1 },
          { id: 'translation', text: 'D·ªãch n·ªôi dung', correctPosition: -1 },
        ],
        explanation:
          'Quy tr√¨nh t·∫°o vƒÉn b·∫£n AI b·∫Øt ƒë·∫ßu t·ª´ vi·ªác x√°c ƒë·ªãnh v·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt, sau ƒë√≥ vi·∫øt prompt r√µ r√†ng, ch·ªçn m√¥ h√¨nh ph√π h·ª£p (nh∆∞ GPT-4), thi·∫øt l·∫≠p tham s·ªë (ƒë·ªô d√†i, nhi·ªát ƒë·ªô), v√† cu·ªëi c√πng ƒë√°nh gi√° v√† ch·ªânh s·ª≠a k·∫øt qu·∫£.',
      },
      {
        id: 'image-gen',
        title: 'Quy tr√¨nh t·∫°o h√¨nh ·∫£nh AI',
        result: 'H√¨nh ·∫£nh m·ªôt con m√®o ƒëang ng·ªìi tr√™n b√†n l√†m vi·ªác',
        resultImage: 'üñºÔ∏è',
        steps: [
          { id: 'concept', text: 'L√™n √Ω t∆∞·ªüng', correctPosition: 1 },
          { id: 'prompt', text: 'Vi·∫øt prompt', correctPosition: 2 },
          { id: 'model', text: 'Ch·ªçn m√¥ h√¨nh', correctPosition: 3 },
          { id: 'style', text: 'Ch·ªçn phong c√°ch', correctPosition: 4 },
          { id: 'review', text: 'ƒê√°nh gi√° k·∫øt qu·∫£', correctPosition: 5 },
          { id: 'video', text: 'X·ª≠ l√Ω video', correctPosition: -1 },
          { id: 'audio', text: 'X·ª≠ l√Ω √¢m thanh', correctPosition: -1 },
        ],
        explanation:
          'Quy tr√¨nh t·∫°o h√¨nh ·∫£nh AI b·∫Øt ƒë·∫ßu t·ª´ vi·ªác l√™n √Ω t∆∞·ªüng r√µ r√†ng, sau ƒë√≥ vi·∫øt prompt m√¥ t·∫£ chi ti·∫øt, ch·ªçn m√¥ h√¨nh ph√π h·ª£p (nh∆∞ DALL-E, Midjourney), ch·ªçn phong c√°ch (nh∆∞ ch√¢n th·ª±c, ho·∫°t h√¨nh), v√† cu·ªëi c√πng ƒë√°nh gi√° v√† ch·ªçn k·∫øt qu·∫£ ph√π h·ª£p nh·∫•t.',
      },
    ],
    2: [
      {
        id: 'sentiment',
        title: 'Quy tr√¨nh ph√¢n t√≠ch c·∫£m x√∫c',
        result: 'Ph√¢n t√≠ch c·∫£m x√∫c t·ª´ ƒë√°nh gi√° c·ªßa kh√°ch h√†ng',
        resultImage: 'üìä',
        steps: [
          { id: 'goal', text: 'X√°c ƒë·ªãnh m·ª•c ti√™u', correctPosition: 1 },
          { id: 'data', text: 'Thu th·∫≠p d·ªØ li·ªáu', correctPosition: 2 },
          { id: 'preprocessing', text: 'Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu', correctPosition: 3 },
          { id: 'model', text: '√Åp d·ª•ng m√¥ h√¨nh', correctPosition: 4 },
          { id: 'visualization', text: 'Tr·ª±c quan h√≥a', correctPosition: 5 },
          { id: 'action', text: 'ƒê∆∞a ra h√†nh ƒë·ªông', correctPosition: 6 },
          { id: 'image', text: 'Nh·∫≠n d·∫°ng h√¨nh ·∫£nh', correctPosition: -1 },
          { id: 'translation', text: 'D·ªãch vƒÉn b·∫£n', correctPosition: -1 },
        ],
        explanation:
          'Quy tr√¨nh ph√¢n t√≠ch c·∫£m x√∫c b·∫Øt ƒë·∫ßu t·ª´ vi·ªác x√°c ƒë·ªãnh m·ª•c ti√™u ph√¢n t√≠ch, thu th·∫≠p d·ªØ li·ªáu ƒë√°nh gi√°, ti·ªÅn x·ª≠ l√Ω v√† l√†m s·∫°ch d·ªØ li·ªáu, √°p d·ª•ng m√¥ h√¨nh ph√¢n t√≠ch c·∫£m x√∫c, tr·ª±c quan h√≥a k·∫øt qu·∫£, v√† cu·ªëi c√πng ƒë∆∞a ra h√†nh ƒë·ªông d·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch.',
      },
      {
        id: 'recommendation',
        title: 'Quy tr√¨nh x√¢y d·ª±ng h·ªá th·ªëng ƒë·ªÅ xu·∫•t',
        result: 'H·ªá th·ªëng ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m cho ng∆∞·ªùi d√πng',
        resultImage: 'üõí',
        steps: [
          { id: 'goal', text: 'X√°c ƒë·ªãnh m·ª•c ti√™u', correctPosition: 1 },
          { id: 'data', text: 'Thu th·∫≠p d·ªØ li·ªáu', correctPosition: 2 },
          { id: 'preprocessing', text: 'Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu', correctPosition: 3 },
          { id: 'model', text: 'X√¢y d·ª±ng m√¥ h√¨nh', correctPosition: 4 },
          { id: 'testing', text: 'Ki·ªÉm th·ª≠ m√¥ h√¨nh', correctPosition: 5 },
          { id: 'deployment', text: 'Tri·ªÉn khai h·ªá th·ªëng', correctPosition: 6 },
          { id: 'monitoring', text: 'Gi√°m s√°t v√† c·∫£i ti·∫øn', correctPosition: 7 },
          { id: 'translation', text: 'D·ªãch vƒÉn b·∫£n', correctPosition: -1 },
          { id: 'speech', text: 'Nh·∫≠n d·∫°ng gi·ªçng n√≥i', correctPosition: -1 },
        ],
        explanation:
          'Quy tr√¨nh x√¢y d·ª±ng h·ªá th·ªëng ƒë·ªÅ xu·∫•t b·∫Øt ƒë·∫ßu t·ª´ vi·ªác x√°c ƒë·ªãnh m·ª•c ti√™u ƒë·ªÅ xu·∫•t, thu th·∫≠p d·ªØ li·ªáu ng∆∞·ªùi d√πng v√† s·∫£n ph·∫©m, ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu, x√¢y d·ª±ng m√¥ h√¨nh ƒë·ªÅ xu·∫•t, ki·ªÉm th·ª≠ v√† ƒë√°nh gi√° m√¥ h√¨nh, tri·ªÉn khai h·ªá th·ªëng, v√† cu·ªëi c√πng gi√°m s√°t v√† c·∫£i ti·∫øn li√™n t·ª•c.',
      },
    ],
    3: [
      {
        id: 'chatbot',
        title: 'Quy tr√¨nh x√¢y d·ª±ng chatbot',
        result: 'Chatbot h·ªó tr·ª£ kh√°ch h√†ng t·ª± ƒë·ªông',
        resultImage: 'ü§ñ',
        steps: [
          { id: 'requirements', text: 'Ph√¢n t√≠ch y√™u c·∫ßu', correctPosition: 1 },
          { id: 'data', text: 'Thu th·∫≠p d·ªØ li·ªáu', correctPosition: 2 },
          { id: 'design', text: 'Thi·∫øt k·∫ø lu·ªìng h·ªôi tho·∫°i', correctPosition: 3 },
          { id: 'model', text: 'L·ª±a ch·ªçn m√¥ h√¨nh', correctPosition: 4 },
          { id: 'integration', text: 'T√≠ch h·ª£p h·ªá th·ªëng', correctPosition: 5 },
          { id: 'testing', text: 'Ki·ªÉm th·ª≠ v√† t·ªëi ∆∞u', correctPosition: 6 },
          { id: 'deployment', text: 'Tri·ªÉn khai chatbot', correctPosition: 7 },
          { id: 'monitoring', text: 'Gi√°m s√°t v√† c·∫£i ti·∫øn', correctPosition: 8 },
          { id: 'image', text: 'Nh·∫≠n d·∫°ng h√¨nh ·∫£nh', correctPosition: -1 },
          { id: 'video', text: 'X·ª≠ l√Ω video', correctPosition: -1 },
        ],
        explanation:
          'Quy tr√¨nh x√¢y d·ª±ng chatbot b·∫Øt ƒë·∫ßu t·ª´ vi·ªác ph√¢n t√≠ch y√™u c·∫ßu, thu th·∫≠p d·ªØ li·ªáu h·ªôi tho·∫°i, thi·∫øt k·∫ø lu·ªìng h·ªôi tho·∫°i, l·ª±a ch·ªçn m√¥ h√¨nh ph√π h·ª£p, t√≠ch h·ª£p v·ªõi h·ªá th·ªëng hi·ªán c√≥, ki·ªÉm th·ª≠ v√† t·ªëi ∆∞u h√≥a, tri·ªÉn khai chatbot, v√† cu·ªëi c√πng gi√°m s√°t v√† c·∫£i ti·∫øn li√™n t·ª•c.',
      },
      {
        id: 'ml-pipeline',
        title: 'Quy tr√¨nh Machine Learning',
        result: 'H·ªá th·ªëng Machine Learning t·ª± ƒë·ªông',
        resultImage: '‚öôÔ∏è',
        steps: [
          { id: 'problem', text: 'X√°c ƒë·ªãnh v·∫•n ƒë·ªÅ', correctPosition: 1 },
          { id: 'data', text: 'Thu th·∫≠p d·ªØ li·ªáu', correctPosition: 2 },
          { id: 'exploration', text: 'Kh√°m ph√° d·ªØ li·ªáu', correctPosition: 3 },
          { id: 'feature', text: 'K·ªπ thu·∫≠t ƒë·∫∑c tr∆∞ng', correctPosition: 4 },
          { id: 'model', text: 'Hu·∫•n luy·ªán m√¥ h√¨nh', correctPosition: 5 },
          { id: 'evaluation', text: 'ƒê√°nh gi√° m√¥ h√¨nh', correctPosition: 6 },
          { id: 'deployment', text: 'Tri·ªÉn khai m√¥ h√¨nh', correctPosition: 7 },
          { id: 'monitoring', text: 'Gi√°m s√°t v√† t√°i hu·∫•n luy·ªán', correctPosition: 8 },
          { id: 'image', text: 'X·ª≠ l√Ω h√¨nh ·∫£nh', correctPosition: -1 },
          { id: 'speech', text: 'T·ªïng h·ª£p gi·ªçng n√≥i', correctPosition: -1 },
        ],
        explanation:
          'Quy tr√¨nh Machine Learning b·∫Øt ƒë·∫ßu t·ª´ vi·ªác x√°c ƒë·ªãnh v·∫•n ƒë·ªÅ kinh doanh, thu th·∫≠p v√† chu·∫©n b·ªã d·ªØ li·ªáu, kh√°m ph√° v√† ph√¢n t√≠ch d·ªØ li·ªáu, k·ªπ thu·∫≠t ƒë·∫∑c tr∆∞ng, l·ª±a ch·ªçn v√† hu·∫•n luy·ªán m√¥ h√¨nh, ƒë√°nh gi√° m√¥ h√¨nh, tri·ªÉn khai m√¥ h√¨nh, v√† cu·ªëi c√πng gi√°m s√°t v√† t√°i hu·∫•n luy·ªán.',
      },
    ],
  };

  // Kh·ªüi t·∫°o tr√≤ ch∆°i
  useEffect(() => {
    startLevel(level);
  }, [level]);

  // B·∫Øt ƒë·∫ßu c·∫•p ƒë·ªô m·ªõi
  const startLevel = (levelNum: number) => {
    // L·∫•y danh s√°ch c√¢u ƒë·ªë cho c·∫•p ƒë·ªô hi·ªán t·∫°i
    const levelPuzzles = puzzles[levelNum] || puzzles[1];

    // Ch·ªçn m·ªôt c√¢u ƒë·ªë ng·∫´u nhi√™n
    const randomPuzzle = levelPuzzles[Math.floor(Math.random() * levelPuzzles.length)];

    // X√°o tr·ªôn c√°c b∆∞·ªõc
    const shuffledSteps = [...randomPuzzle.steps].sort(() => Math.random() - 0.5);

    // T√≠nh s·ªë l∆∞·ª£ng v·ªã tr√≠ c·∫ßn thi·∫øt (s·ªë b∆∞·ªõc c√≥ correctPosition > 0)
    const requiredPositions = randomPuzzle.steps.filter((step) => step.correctPosition > 0).length;

    // C·∫≠p nh·∫≠t c√¢u ƒë·ªë hi·ªán t·∫°i
    setCurrentPuzzle(randomPuzzle);
    setAvailableSteps(shuffledSteps);
    setPlacedSteps(Array(requiredPositions).fill(null));

    // ƒê·∫∑t l·∫°i tr·∫°ng th√°i
    setShowResult(false);
    setMessage(`K√©o c√°c b∆∞·ªõc v√†o ƒë√∫ng v·ªã tr√≠ ƒë·ªÉ ho√†n th√†nh quy tr√¨nh`);
    setShowExplanation(false);

    // ƒê·∫∑t l·∫°i refs cho c√°c v·ªã tr√≠ th·∫£
    slotRefs.current = Array(requiredPositions).fill(null);
  };

  // X·ª≠ l√Ω khi b·∫Øt ƒë·∫ßu k√©o m·ªôt b∆∞·ªõc
  const handleDragStart = (step: WorkflowStep) => {
    setDraggedStep(step);
  };

  // X·ª≠ l√Ω khi k·∫øt th√∫c k√©o
  const handleDragEnd = () => {
    setDraggedStep(null);
  };

  // X·ª≠ l√Ω khi th·∫£ m·ªôt b∆∞·ªõc v√†o v·ªã tr√≠
  const handleDrop = (slotIndex: number) => {
    if (!draggedStep) return;

    // Ki·ªÉm tra xem b∆∞·ªõc n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ·ªü v·ªã tr√≠ kh√°c ch∆∞a
    const existingIndex = placedSteps.findIndex((step) => step?.id === draggedStep.id);

    // T·∫°o b·∫£n sao c·ªßa m·∫£ng placedSteps
    const newPlacedSteps = [...placedSteps];

    // N·∫øu b∆∞·ªõc n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ·ªü v·ªã tr√≠ kh√°c, x√≥a n√≥ kh·ªèi v·ªã tr√≠ c≈©
    if (existingIndex !== -1) {
      newPlacedSteps[existingIndex] = null;
    }

    // N·∫øu v·ªã tr√≠ m·ªõi ƒë√£ c√≥ b∆∞·ªõc kh√°c, ƒë∆∞a b∆∞·ªõc ƒë√≥ tr·ªü l·∫°i danh s√°ch available
    if (newPlacedSteps[slotIndex]) {
      setAvailableSteps((prev) => [...prev, newPlacedSteps[slotIndex]!]);
    }

    // ƒê·∫∑t b∆∞·ªõc hi·ªán t·∫°i v√†o v·ªã tr√≠ m·ªõi
    newPlacedSteps[slotIndex] = draggedStep;

    // C·∫≠p nh·∫≠t state
    setPlacedSteps(newPlacedSteps);

    // X√≥a b∆∞·ªõc kh·ªèi danh s√°ch available n·∫øu n√≥ ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc ƒë√≥
    if (existingIndex === -1) {
      setAvailableSteps((prev) => prev.filter((step) => step.id !== draggedStep.id));
    }
  };

  // X·ª≠ l√Ω khi nh·∫•p v√†o m·ªôt b∆∞·ªõc ƒë√£ ƒë·∫∑t ƒë·ªÉ lo·∫°i b·ªè
  const handleRemoveStep = (slotIndex: number) => {
    const step = placedSteps[slotIndex];
    if (!step) return;

    // ƒê∆∞a b∆∞·ªõc tr·ªü l·∫°i danh s√°ch available
    setAvailableSteps((prev) => [...prev, step]);

    // X√≥a b∆∞·ªõc kh·ªèi v·ªã tr√≠
    const newPlacedSteps = [...placedSteps];
    newPlacedSteps[slotIndex] = null;
    setPlacedSteps(newPlacedSteps);
  };

  // Ki·ªÉm tra th·ª© t·ª±
  const checkOrder = () => {
    if (!currentPuzzle) return;

    // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c v·ªã tr√≠ ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn ch∆∞a
    const allFilled = placedSteps.every((step) => step !== null);

    if (!allFilled) {
      setMessage('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c v·ªã tr√≠ tr∆∞·ªõc khi ki·ªÉm tra');
      return;
    }

    // Ki·ªÉm tra xem c√°c b∆∞·ªõc c√≥ ·ªü ƒë√∫ng v·ªã tr√≠ kh√¥ng
    let correctCount = 0;
    placedSteps.forEach((step, index) => {
      if (step && step.correctPosition === index + 1) {
        correctCount++;
      }
    });

    setShowResult(true);

    if (correctCount === placedSteps.length) {
      // T·∫•t c·∫£ ƒë·ªÅu ƒë√∫ng v·ªã tr√≠
      const pointsEarned = level * 100;
      setScore((prev) => prev + pointsEarned);
      setMessage(`Ho√†n h·∫£o! T·∫•t c·∫£ c√°c b∆∞·ªõc ƒë·ªÅu ƒë√∫ng v·ªã tr√≠. +${pointsEarned} ƒëi·ªÉm`);
    } else {
      // C√≤n sai th·ª© t·ª±
      const percentCorrect = Math.round((correctCount / placedSteps.length) * 100);
      setMessage(
        `B·∫°n ƒë√£ ƒë·∫∑t ƒë√∫ng ${correctCount}/${placedSteps.length} b∆∞·ªõc (${percentCorrect}%). H√£y xem gi·∫£i th√≠ch v√† th·ª≠ l·∫°i!`
      );
    }

    // Hi·ªÉn th·ªã gi·∫£i th√≠ch
    setShowExplanation(true);
  };

  // Chuy·ªÉn sang c√¢u ƒë·ªë ti·∫øp theo
  const nextPuzzle = () => {
    // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c b∆∞·ªõc c√≥ ƒë√∫ng v·ªã tr√≠ kh√¥ng
    const allCorrect = placedSteps.every(
      (step, index) => step && step.correctPosition === index + 1
    );

    if (allCorrect) {
      // N·∫øu ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c c√¢u ƒë·ªë ·ªü c·∫•p ƒë·ªô hi·ªán t·∫°i, chuy·ªÉn sang c·∫•p ƒë·ªô ti·∫øp theo
      if (level < 3) {
        setLevel((prev) => prev + 1);
      } else {
        // N·∫øu ƒë√£ ·ªü c·∫•p ƒë·ªô cao nh·∫•t, ch·ªçn m·ªôt c√¢u ƒë·ªë ng·∫´u nhi√™n
        startLevel(level);
      }
    } else {
      // N·∫øu tr·∫£ l·ªùi sai, th·ª≠ l·∫°i c√¢u ƒë·ªë hi·ªán t·∫°i
      startLevel(level);
    }
  };

  // ƒê·∫∑t l·∫°i tr√≤ ch∆°i
  const resetGame = () => {
    setScore(0);
    setLevel(1);
    startLevel(1);
  };

  // ƒê·∫∑t l·∫°i c·∫•p ƒë·ªô hi·ªán t·∫°i
  const resetLevel = () => {
    startLevel(level);
  };

  if (!currentPuzzle) return <div>Loading...</div>;

  return (
    <div className="flex flex-col items-center w-full max-w-md mx-auto p-4">
      <div className="w-full text-center mb-4">
        <h1 className="text-2xl font-bold mb-2">Thi</h1>
        <div className="flex justify-between items-center">
          <div className="bg-primary/10 rounded-lg p-2">
            <span className="font-bold">C·∫•p ƒë·ªô: {level}</span>
          </div>
          <div className="bg-primary/10 rounded-lg p-2">
            <span className="font-bold">ƒêi·ªÉm: {score}</span>
          </div>
        </div>
      </div>

      <div className="w-full mb-4">
        <div
          className={`p-3 rounded-lg text-center ${
            showResult
              ? placedSteps.every((step, index) => step && step.correctPosition === index + 1)
                ? 'bg-green-100'
                : 'bg-yellow-100'
              : 'bg-blue-100'
          }`}
        >
          <p>{message}</p>
        </div>
      </div>

      {/* K·∫øt qu·∫£ */}
      <Card className="w-full p-4 mb-6 bg-slate-50 border-2 border-primary">
        <div className="text-center">
          <div className="text-4xl mb-2">{currentPuzzle.resultImage}</div>
          <h2 className="text-xl font-bold">{currentPuzzle.title}</h2>
          <p className="mt-2">{currentPuzzle.result}</p>
        </div>
      </Card>

      {/* C√°c b∆∞·ªõc c√≥ s·∫µn */}
      <div className="w-full mb-6">
        <h3 className="font-bold mb-3">C√°c b∆∞·ªõc c√≥ s·∫µn:</h3>
        <div className="flex flex-wrap gap-2">
          {availableSteps.map((step) => (
            <div
              key={step.id}
              draggable
              onDragStart={() => handleDragStart(step)}
              onDragEnd={handleDragEnd}
              className="p-2 rounded-lg bg-white border border-gray-300 cursor-grab active:cursor-grabbing"
            >
              {step.text}
            </div>
          ))}
          {availableSteps.length === 0 && (
            <p className="text-gray-500 italic">T·∫•t c·∫£ c√°c b∆∞·ªõc ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng</p>
          )}
        </div>
      </div>

      {/* Khu v·ª±c th·∫£ */}
      <div className="w-full mb-6">
        <h3 className="font-bold mb-3">S·∫Øp x·∫øp c√°c b∆∞·ªõc theo th·ª© t·ª±:</h3>
        <div className="space-y-2">
          {placedSteps.map((step, index) => (
            <div
              key={`slot-${index}`}
              ref={(el) => (slotRefs.current[index] = el)}
              className={`p-4 rounded-lg border-2 min-h-[60px] flex items-center justify-center
                ${
                  step
                    ? showResult
                      ? step.correctPosition === index + 1
                        ? 'bg-green-100 border-green-500'
                        : 'bg-red-100 border-red-500'
                      : 'bg-blue-100 border-blue-500'
                    : 'border-dashed border-gray-300 bg-gray-50'
                }`}
              onDragOver={(e) => {
                e.preventDefault();
                e.currentTarget.classList.add('border-primary');
              }}
              onDragLeave={(e) => {
                e.currentTarget.classList.remove('border-primary');
              }}
              onDrop={(e) => {
                e.preventDefault();
                e.currentTarget.classList.remove('border-primary');
                handleDrop(index);
              }}
              onClick={() => step && handleRemoveStep(index)}
            >
              {step ? (
                <div className="flex items-center justify-between w-full">
                  <span className="font-medium">
                    {index + 1}. {step.text}
                  </span>
                  {!showResult && <span className="text-xs text-gray-500 ml-2">(Nh·∫•p ƒë·ªÉ x√≥a)</span>}
                </div>
              ) : (
                <span className="text-gray-400">K√©o b∆∞·ªõc v√†o ƒë√¢y</span>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Gi·∫£i th√≠ch */}
      {showExplanation && (
        <Card className="w-full p-4 mb-6 bg-yellow-50">
          <div className="flex items-center mb-2">
            <Info className="w-5 h-5 mr-2 text-yellow-600" />
            <h3 className="font-bold">Gi·∫£i th√≠ch:</h3>
          </div>
          <p>{currentPuzzle.explanation}</p>
        </Card>
      )}

      {/* N√∫t ƒëi·ªÅu khi·ªÉn */}
      <div className="flex gap-3 justify-center">
        {!showResult ? (
          <Button onClick={checkOrder} className="flex items-center gap-2">
            <Trophy className="w-4 h-4" />
            Ki·ªÉm tra
          </Button>
        ) : (
          <Button onClick={nextPuzzle} className="flex items-center gap-2">
            <ArrowRight className="w-4 h-4" />
            C√¢u ti·∫øp theo
          </Button>
        )}
        <Button onClick={resetLevel} variant="outline" className="flex items-center gap-2">
          <RefreshCw className="w-4 h-4" />
          L√†m l·∫°i
        </Button>
      </div>
    </div>
  );
}
